"""
Module: detailed_business_requirements.py

Description:
    This module provides an asynchronous function `detailed_buss_req` that generates detailed business
    requirements by combining prompt engineering, document retrieval, and language model inference. The function
    constructs a specialized prompt, retrieves context documents related to the input query, and then invokes
    a language model chain to generate a clear, step-by-step list of requirements based on an original question
    and a verbatim business requirement.

Dependencies:
    - asyncio: For asynchronous execution.
    - warnings: To suppress non-critical warnings.
    - os: To interact with environment variables.
    - dotenv: For loading environment variables from a .env file.
    - pandas: Imported for potential data manipulation.
    - io.StringIO: For string-based I/O operations.
    - tiktoken: For tokenization tasks.
    - langchain (and submodules): For building prompt templates, handling language model chains, and parsing outputs.
    - pinecone: For integrating with Pinecone’s vector database.
    - src.business_requirements.retriever: A module for retrieving relevant documents based on a query.
    - src.prompts: Additional prompt configurations.

Usage:
    This module is intended to be used in asynchronous contexts. For example:

        import asyncio
        result = asyncio.run(detailed_buss_req("What are the compliance requirements?", "Ensure full regulatory compliance"))
        print(result)

Environment Setup:
    - The OpenAI API key is loaded from an environment variable ('OPENAI_API_KEY').
    - The Pinecone API key is similarly loaded from 'PINECONE_API_KEY'.
    - Any warnings are suppressed for cleaner output.
"""

import asyncio
import warnings
import os
from dotenv import load_dotenv
import pandas as pd
from io import StringIO
import tiktoken

from langchain import hub
from langchain_core.output_parsers import StrOutputParser
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from pinecone.grpc import PineconeGRPC as Pinecone
from pinecone import ServerlessSpec
from src.business_requirements import retriever  # Ensure retriever is imported once
from src.prompts import *

# Suppress any warnings for cleaner output
warnings.filterwarnings("ignore")

# Load environment variables from the .env file
load_dotenv()

# Set API keys from environment variables
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")
pinecone_api_key = os.getenv("PINECONE_API_KEY")


async def detailed_buss_req(original_question: str, business_requirement: str) -> str:
    """
    Generate detailed business requirements based on an original question and a specified business requirement.

    This asynchronous function performs the following steps:
      1. Constructs a detailed prompt template outlining the steps required for generating comprehensive business requirements.
      2. Creates a chat prompt using the detailed prompt template.
      3. Initializes a ChatOpenAI language model configured with a specific model name ("gpt-4o-mini") and a deterministic temperature.
      4. Combines the prompt, language model, and an output parser into a processing chain.
      5. Retrieves context documents relevant to the query using the provided `retriever` function (executed in a separate thread to prevent blocking).
      6. Asynchronously invokes the language model chain with the retrieved context, original question, and verbatim business requirement.
      7. Returns the generated detailed requirements as a string.

    Parameters:
        original_question (str): The primary question prompting the need for detailed business requirements.
        business_requirement (str): The verbatim business requirement text that requires further elaboration.

    Returns:
        str: A string containing the detailed business requirements generated by the language model.

    Raises:
        Exceptions raised during asynchronous operations or API calls will propagate to the caller.
    """

    business_requirement_detailed_prompt = '''
    #  **Detailed Prompt for Requirements**

    ## **Your Task**
    - Provide list of detailed requirements and actions necessary to meet the **Verbatim Business Requirements*** based on the provided **Context**, **Verbatim Business Requirement**, and **Original Question** while ensuring clarity, accuracy, and legal precision
    
    ## **Instructions**

    ### 1. **Read and Analyze**
    - Carefully review the **Context**, **Verbatim Business Requirement**, and **Original Question**.
    - Identify key points, constraints, and any legal aspects that must be addressed.
    - Requirements are defined as detailed steps that need to be completed to fulfill the Verbatim Business Requirement
    - Follow details in **Key Characteristics of Requirements as Detailed Steps** to define requirements

    ### 2. **Step-by-Step Analysis**
    - Extract the essential information needed to answer the question.
    - Cross-check that the identified detailed requirements from the **Context** are related to the **Original Question**
    - Verify that Detailed Requirements are correctly represented
    - Ensure that there are no legal inconsistencies or missing details
    - Ensure that output is concise and clear 

    ### 3. **Additional Instruction**
    - Ensure that you are using plain and clear English
    - Ensure that requirements are readable
    - Ensure that requirements are provided in a detailed list and bullet points
    
    ### 4. **Output Formatting**
    - Ensure that output is a bullet point list
    - Ensure that output is formatted in Markdown
    
    ### 5. **Key Characteristics of Requirements as Detailed Steps**
    - Specific – Clearly define what needs to be done.
    - Actionable – Each step must outline an action that contributes to completion.
    - Measurable – Progress should be trackable to determine completion.
    - Ordered – Steps should follow a logical sequence.
    - Achievable – Each requirement should be feasible within the given constraints.
    - Time-bound – Some requirements may include deadlines or timeframes.

    ## **Input Sections**

    ### **Context**
    {context}

    ### **Verbatim Business Requirements**
    {business_requirement}

    ### **Original Question**
    {original_question}

    '''

    # Create a chat prompt template using the synthesis prompt.
    prompt = ChatPromptTemplate([
        ("system", business_requirement_detailed_prompt),
    ])

    # Initialize the ChatOpenAI language model with a specific model name and temperature.
    llm = ChatOpenAI(model_name="gpt-4o", temperature=0)

    # Combine the prompt, the language model, and the output parser into a processing chain.
    rag_chain = prompt | llm | StrOutputParser()

    # Retrieve documents relevant to the query.
    # If `retriever` is a blocking function, we run it in a separate thread.
    docs = await asyncio.to_thread(
        retriever,
        query=" ".join([original_question, business_requirement]),
        top_k=20,
    )

    # Asynchronously invoke the chain with the provided inputs.
    generation = await rag_chain.ainvoke({
        "context": docs,
        "original_question": original_question,
        "business_requirement": business_requirement
    })

    return generation
